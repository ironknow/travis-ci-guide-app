apply plugin: 'com.android.application'
apply plugin: 'com.f2prateek.checkstyle'

check.dependsOn 'checkstyle', 'findbugs', 'pmd'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.guideapp.guideapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:palette-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v13:$rootProject.supportLibraryVersion"

    compile "de.hdodenhof:circleimageview:$rootProject.circleImageVersion"
    compile "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    compile "com.squareup.picasso:picasso:$rootProject.picassoVersion"

    compile "com.google.android.gms:play-services-location:$rootProject.playServicesVersion"
    compile "com.google.android.gms:play-services-maps:$rootProject.playServicesVersion"

    compile "it.sephiroth.android.library.imagezoom:imagezoom:$rootProject.imageZoomVersion"
    compile "com.google.maps.android:android-maps-utils:$rootProject.mapsUtilsVersion"

    compile "com.jakewharton:butterknife:$rootProject.butterKnifeVersion"

    compile project(path: ':backend', configuration: 'android-endpoints')
}

task findbugs(type: FindBugs, dependsOn: assembleDebug) {
    ignoreFailures = false
    effort = 'max'
    reportLevel = 'high'
    excludeFilter = new File("${project.rootDir}/app/config/findbugs-filter.xml")
    classes = files("${project.rootDir}/app/build/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        html {
            destination "$project.buildDir/gradle/reports/findbugs/findbugs.html"
        }
    }

    classpath = files()
}

task pmd(type: Pmd) {
    ignoreFailures = false
    ruleSetFiles = files("${project.rootDir}/app/config/pmd-ruleset.xml")
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        html {
            destination "$project.buildDir/gradle/reports/findbugs/findbugs.html"
        }
    }
}